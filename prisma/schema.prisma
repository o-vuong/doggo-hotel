// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  role         Role          @default(PET_OWNER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  pets         Pet[]
  reservations Reservation[]
  payments     Payment[]     @relation("UserPayments")
}

enum Role {
  SYSTEM_ADMIN
  FACILITY_ADMIN
  MANAGER
  STAFF
  PET_OWNER
}

model Pet {
  id                 Int      @id @default(autoincrement())
  name               String
  species            String
  breed              String?
  age                Int?
  vaccinationStatus  String[] @default([])
  medicalHistory     String?
  dietaryPreferences String?
  behavioralNotes    String?
  emergencyContact   String?
  ownerId            String
  owner              User     @relation(fields: [ownerId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  reservations       Reservation[]
}

model Facility {
  id             Int      @id @default(autoincrement())
  name           String
  location       String?
  address        String?
  phone          String?
  email          String?
  operatingHours String?
  kennels        Kennel[]
  capacity       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  reservations   Reservation[] @relation("FacilityReservations")
}

model Kennel {
  id         Int            @id @default(autoincrement())
  facilityId Int
  name       String
  capacity   Int?
  category   KennelCategory
  facility   Facility       @relation(fields: [facilityId], references: [id])
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  reservations Reservation[] @relation("ReservationKennel")
}

enum KennelCategory {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

model Reservation {
  id         Int               @id @default(autoincrement())
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  startDate  DateTime
  endDate    DateTime
  petId      Int
  pet        Pet               @relation(fields: [petId], references: [id])
  userId     String
  user       User              @relation(fields: [userId], references: [id])
  kennelId   Int
  kennel     Kennel            @relation("ReservationKennel", fields: [kennelId], references: [id])
  facilityId Int
  facility   Facility          @relation("FacilityReservations", fields: [facilityId], references: [id])
  payment    Payment?          @relation("ReservationPayment")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

// Payment model added for payment processing
model Payment {
  id              Int           @id @default(autoincrement())
  amount          Float
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?
  reservationId   Int           @unique
  reservation     Reservation   @relation("ReservationPayment", fields: [reservationId], references: [id])
  userId          String
  user            User          @relation("UserPayments", fields: [userId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}